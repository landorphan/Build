stages:
  - stage: PrepareStage
    jobs: 
    - job: PrepareJob
      pool:
        vmImage: 'ubuntu-latest'

      steps:
        - checkout: self
          path: s/source
        - checkout: build
          path: s/build
        - checkout: tools
          path: s/tools
        - powershell: | 
            Get-ChildItem env:
          displayName: Display Envrionment Varaibles 
        - powershell: |
            if (!(Test-Path "$Env:AGENT_BUILDDIRECTORY/info" )) { mkdir "$Env:AGENT_BUILDDIRECTORY/info" }
            $Env:SEARCHFOR.Split(',') | foreach { Get-ChildItem -r "$_" | % { $_.FullName } } > "$Env:AGENT_BUILDDIRECTORY/info/build.lst"
            echo "Located the following build files"
            cat "$Env:AGENT_BUILDDIRECTORY/info/build.lst"
          displayName: Locate Build Files
        - bash: dotnet build tools
          displayName: Create Build Tools
        - bash: |
            echo "Building Map"
            cat "$AGENT_BUILDDIRECTORY/info/build.lst" | dotnet tools/DotNetCoreBuildTools/bin/Debug/netcoreapp3.1/DotNetCoreBuildTools.dll > "$AGENT_BUILDDIRECTORY/info/projects.map"
            echo "Outputing Map"
            cat "$AGENT_BUILDDIRECTORY/info/projects.map"
          displayName: Generating Project Map
        - publish: $(Build.BuildDirectory)/info
          artifact: info

    - job: Build
      dependsOn: PrepareJob
      pool:
        vmImage: 'ubuntu-latest'

      steps:
        - checkout: self
          path: s/source
        - checkout: build
          path: s/build
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: info
            path: $(Agent.BuildDirectory)/info
          displayName: Download Build Map
        - bash: |
            ls "$AGENT_BUILDDIRECTORY"/info
          displayName: List Build Artifacts
        - bash: |
            echo "$AGENT_JOBNAME"
          displayName: Echo Job Name